{"version":3,"sources":["webpack:///./src/templates/blog-post.js"],"names":["ArticleTemplate","render","this","props","data","topic","pageContext","post","markdownRemark","similarPosts","allMarkdownRemark","edges","filter","item","node","frontmatter","category","title","index","pageType","description","id","className","date","tags","map","tag","key","to","split","join","toLowerCase","fluid","featuredImage","childImageSharp","dangerouslySetInnerHTML","__html","html","length","fields","slug","excerpt","Component","pageQuery"],"mappings":"yPAOMA,E,gLACJC,OAAA,WAAU,IAAD,EACuBC,KAAKC,MAA3BC,EADD,EACCA,KACAC,EAFD,EACOC,YACND,MACFE,EAAOH,EAAKI,eAEZC,EAAeL,EAAKM,kBAAkBC,MACzCC,QAAO,SAAAC,GACN,OACEA,EAAKC,KAAKC,YAAYC,WAAaX,GACnCQ,EAAKC,KAAKC,YAAYE,QAAUV,EAAKQ,YAAYE,SAGpDL,QAAO,SAACC,EAAMK,GACb,OAAOA,EAAQ,KAGnB,OACE,kBAAC,IAAD,CAAQC,SAAS,QACf,kBAAC,IAAD,CACEF,MAAOV,EAAKQ,YAAYE,MACxBG,YAAab,EAAKQ,YAAYK,cAEhC,yBAAKC,GAAG,WACN,gCACE,wBAAIC,UAAU,iBAAiBf,EAAKQ,YAAYE,OAChD,uBAAGK,UAAU,gBAAgBf,EAAKQ,YAAYQ,MAC9C,yBAAKD,UAAU,gBACZf,EAAKQ,YAAYS,KAAKC,KAAI,SAAAC,GAAG,OAC5B,kBAAC,OAAD,CACEJ,UAAU,MACVK,IAAKD,EACLE,GAAE,IAAMF,EACLG,MAAM,KACNC,KAAK,KACLD,MAAM,KACNC,KAAK,KACLC,eAEFL,OAIP,kBAAC,IAAD,CACEM,MAAOzB,EAAKQ,YAAYkB,cAAcC,gBAAgBF,MACtDV,UAAU,mBAGd,yBACEA,UAAU,mBACVa,wBAAyB,CAAEC,OAAQ7B,EAAK8B,QAG1C,6BACG5B,EAAa6B,OAAS,GACrB,wBAAIjB,GAAG,wBAAP,SACSnB,KAAKC,MAAMG,YAAYD,MADhC,cAKF,iCACGI,EAAagB,KAAI,YAAe,IAAZX,EAAW,EAAXA,KACnB,OACE,kBAAC,IAAD,CACEa,IAAKb,EAAKyB,OAAOC,KACjBvB,MAAOH,EAAKC,YAAYE,MACxBuB,KAAM1B,EAAKyB,OAAOC,KAClBjB,KAAMT,EAAKC,YAAYQ,KACvBH,YAAaN,EAAKC,YAAYK,YAC9BqB,QAAS3B,EAAK2B,QACd1B,YAAaD,EAAKC,sB,GAtER2B,aAkFf1C,YACR,IAAM2C,EAAS","file":"component---src-templates-blog-post-js-927c2a088595bb57ab32.js","sourcesContent":["import React, { Component } from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport Image from \"gatsby-image\"\nimport SEO from \"../components/seo\"\nimport Card from \"../components/card\"\n\nclass ArticleTemplate extends Component {\n  render() {\n    const { data, pageContext } = this.props\n    const { topic } = pageContext\n    const post = data.markdownRemark\n\n    const similarPosts = data.allMarkdownRemark.edges\n      .filter(item => {\n        return (\n          item.node.frontmatter.category === topic &&\n          item.node.frontmatter.title !== post.frontmatter.title\n        )\n      })\n      .filter((item, index) => {\n        return index < 2\n      })\n\n    return (\n      <Layout pageType=\"Post\">\n        <SEO\n          title={post.frontmatter.title}\n          description={post.frontmatter.description}\n        />\n        <div id=\"article\">\n          <header>\n            <h1 className=\"article-title\">{post.frontmatter.title}</h1>\n            <p className=\"article-date\">{post.frontmatter.date}</p>\n            <div className=\"article-tags\">\n              {post.frontmatter.tags.map(tag => (\n                <Link\n                  className=\"tag\"\n                  key={tag}\n                  to={`/${tag\n                    .split(\" \")\n                    .join(\"-\")\n                    .split(\"/\")\n                    .join(\"-\")\n                    .toLowerCase()}`}\n                >\n                  {tag}\n                </Link>\n              ))}\n            </div>\n            <Image\n              fluid={post.frontmatter.featuredImage.childImageSharp.fluid}\n              className=\"article-image\"\n            ></Image>\n          </header>\n          <div\n            className=\"article-markdown\"\n            dangerouslySetInnerHTML={{ __html: post.html }}\n          />\n\n          <div>\n            {similarPosts.length > 0 && (\n              <h3 id=\"similar-posts-header\">\n                Other {this.props.pageContext.topic} Tutorials\n              </h3>\n            )}\n\n            <section>\n              {similarPosts.map(({ node }) => {\n                return (\n                  <Card\n                    key={node.fields.slug}\n                    title={node.frontmatter.title}\n                    slug={node.fields.slug}\n                    date={node.frontmatter.date}\n                    description={node.frontmatter.description}\n                    excerpt={node.excerpt}\n                    frontmatter={node.frontmatter}\n                  />\n                )\n              })}\n            </section>\n          </div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default ArticleTemplate\nexport const pageQuery = graphql`\n  query ArticleBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        dateModified(formatString: \"MMMM DD, YYYY\")\n        description\n        tags\n        category\n        featuredImage {\n          childImageSharp {\n            fluid(maxWidth: 800) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            tags\n            category\n            featuredImage {\n              childImageSharp {\n                fluid(maxWidth: 400) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}